commit 6fdbeb6580dedececf07ea7caf0ef7be82e1ecfc
Author: Joo Aun Saw <jasaw@dius.com.au>
Date:   Tue Jul 21 11:27:44 2015 +1000

    iio: added high resolution timer based trigger

diff --git a/drivers/iio/trigger/Kconfig b/drivers/iio/trigger/Kconfig
index 7999612..de6b50e 100644
--- a/drivers/iio/trigger/Kconfig
+++ b/drivers/iio/trigger/Kconfig
@@ -5,6 +5,14 @@
 
 menu "Triggers - standalone"
 
+config IIO_HRTIMER_TRIGGER
+	tristate "High resolution timer trigger"
+	help
+	  Provides a frequency based IIO trigger using hrtimers.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called iio-trig-hrtimer.
+
 config IIO_INTERRUPT_TRIGGER
 	tristate "Generic interrupt trigger"
 	help
diff --git a/drivers/iio/trigger/Makefile b/drivers/iio/trigger/Makefile
index 0694dae..fe06eb5 100644
--- a/drivers/iio/trigger/Makefile
+++ b/drivers/iio/trigger/Makefile
@@ -3,5 +3,7 @@
 #
 
 # When adding new entries keep the list in alphabetical order
+
+obj-$(CONFIG_IIO_HRTIMER_TRIGGER) += iio-trig-hrtimer.o
 obj-$(CONFIG_IIO_INTERRUPT_TRIGGER) += iio-trig-interrupt.o
 obj-$(CONFIG_IIO_SYSFS_TRIGGER) += iio-trig-sysfs.o
diff --git a/drivers/iio/trigger/iio-trig-hrtimer.c b/drivers/iio/trigger/iio-trig-hrtimer.c
new file mode 100644
index 0000000..e1ba760
--- /dev/null
+++ b/drivers/iio/trigger/iio-trig-hrtimer.c
@@ -0,0 +1,275 @@
+/*
+ * The industrial I/O periodic hrtimer trigger driver
+ *
+ * Licensed under the GPL-2.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/list.h>
+#include <linux/hrtimer.h>
+
+#include <linux/iio/iio.h>
+#include <linux/iio/trigger.h>
+
+// default delay in ns (10Hz)
+#define HRTIMER_TRIGGER_DEFAULT_DELAY 10000000
+
+struct iio_hrtimer_trig {
+	struct iio_trigger *trig;
+	int id;
+	unsigned long delay;
+	struct hrtimer timer;
+	struct list_head l;
+};
+
+static LIST_HEAD(iio_hrtimer_trig_list);
+static DEFINE_MUTEX(iio_hrtimer_trig_list_mut);
+
+static enum hrtimer_restart iio_trig_hrtimer_trig(struct hrtimer *timer)
+{
+	struct iio_hrtimer_trig *t;
+
+	t = container_of(timer, struct iio_hrtimer_trig, timer);
+
+	hrtimer_forward_now(timer, ns_to_ktime(t->delay));
+	iio_trigger_poll(t->trig);
+
+	return HRTIMER_RESTART;
+}
+
+static int iio_trig_hrtimer_set_state(struct iio_trigger *trig, bool state)
+{
+	struct iio_hrtimer_trig *t;
+
+	t = iio_trigger_get_drvdata(trig);
+
+	if (state)
+		hrtimer_start(&t->timer, ns_to_ktime(t->delay),
+			      HRTIMER_MODE_REL);
+	else
+		hrtimer_cancel(&t->timer);
+
+	return 0;
+}
+
+static int iio_hrtimer_trigger_probe(int id);
+static ssize_t iio_hrtimer_trig_add(struct device *dev,
+				  struct device_attribute *attr,
+				  const char *buf,
+				  size_t len)
+{
+	int ret;
+	unsigned long input;
+
+	ret = kstrtoul(buf, 10, &input);
+	if (ret)
+		return ret;
+	ret = iio_hrtimer_trigger_probe(input);
+	if (ret)
+		return ret;
+	return len;
+}
+static DEVICE_ATTR(add_trigger, S_IWUSR, NULL, &iio_hrtimer_trig_add);
+
+static int iio_hrtimer_trigger_remove(int id);
+static ssize_t iio_hrtimer_trig_remove(struct device *dev,
+				     struct device_attribute *attr,
+				     const char *buf,
+				     size_t len)
+{
+	int ret;
+	unsigned long input;
+
+	ret = kstrtoul(buf, 10, &input);
+	if (ret)
+		return ret;
+	ret = iio_hrtimer_trigger_remove(input);
+	if (ret)
+		return ret;
+	return len;
+}
+
+static DEVICE_ATTR(remove_trigger, S_IWUSR, NULL, &iio_hrtimer_trig_remove);
+
+static struct attribute *iio_hrtimer_trig_attrs[] = {
+	&dev_attr_add_trigger.attr,
+	&dev_attr_remove_trigger.attr,
+	NULL,
+};
+
+static const struct attribute_group iio_hrtimer_trig_group = {
+	.attrs = iio_hrtimer_trig_attrs,
+};
+
+static const struct attribute_group *iio_hrtimer_trig_groups[] = {
+	&iio_hrtimer_trig_group,
+	NULL
+};
+
+
+// Nothing to actually do upon release
+static void iio_trigger_hrtimer_release(struct device *dev)
+{
+}
+
+static struct device iio_hrtimer_trig_dev = {
+	.bus = &iio_bus_type,
+	.groups = iio_hrtimer_trig_groups,
+	.release = &iio_trigger_hrtimer_release,
+};
+
+static ssize_t iio_trig_hrtimer_get_delay(struct device *dev,
+					  struct device_attribute *attr,
+					  char *buf)
+{
+	struct iio_trigger *trig = to_iio_trigger(dev);
+	struct iio_hrtimer_trig *hrtimer_trig = iio_trigger_get_drvdata(trig);
+        return sprintf(buf, "%lu\n", hrtimer_trig->delay);
+}
+
+static ssize_t iio_trig_hrtimer_set_delay(struct device *dev,
+					  struct device_attribute *attr,
+					  const char *buf,
+					  size_t count)
+{
+	struct iio_trigger *trig = to_iio_trigger(dev);
+	struct iio_hrtimer_trig *hrtimer_trig = iio_trigger_get_drvdata(trig);
+	int status;
+	unsigned long delay = 0;
+
+	status = kstrtoul(buf, 10, &delay);
+	if (status == 0) {
+		if (!delay)
+			return -EINVAL;
+		hrtimer_trig->delay = delay;
+	}
+	if (status)
+		count = status;
+
+	return count;
+}
+
+static DEVICE_ATTR(delay_ns, S_IWUSR | S_IRUSR, iio_trig_hrtimer_get_delay, iio_trig_hrtimer_set_delay);
+
+static struct attribute *iio_hrtimer_trigger_attrs[] = {
+	&dev_attr_delay_ns.attr,
+	NULL,
+};
+
+static const struct attribute_group iio_hrtimer_trigger_attr_group = {
+	.attrs = iio_hrtimer_trigger_attrs,
+};
+
+static const struct attribute_group *iio_hrtimer_trigger_attr_groups[] = {
+	&iio_hrtimer_trigger_attr_group,
+	NULL
+};
+
+static const struct iio_trigger_ops iio_hrtimer_trigger_ops = {
+	.owner = THIS_MODULE,
+	.set_trigger_state = iio_trig_hrtimer_set_state,
+};
+
+static int iio_hrtimer_trigger_probe(int id)
+{
+	struct iio_hrtimer_trig *t;
+	int ret;
+	bool foundit = false;
+	mutex_lock(&iio_hrtimer_trig_list_mut);
+	list_for_each_entry(t, &iio_hrtimer_trig_list, l)
+		if (id == t->id) {
+			foundit = true;
+			break;
+		}
+	if (foundit) {
+		ret = -EINVAL;
+		goto out1;
+	}
+	t = kmalloc(sizeof(*t), GFP_KERNEL);
+	if (t == NULL) {
+		ret = -ENOMEM;
+		goto out1;
+	}
+	t->id = id;
+	t->trig = iio_trigger_alloc("hrtimertrig%d", id);
+	if (!t->trig) {
+		ret = -ENOMEM;
+		goto free_t;
+	}
+
+	t->trig->dev.groups = iio_hrtimer_trigger_attr_groups;
+	t->trig->ops = &iio_hrtimer_trigger_ops;
+	t->trig->dev.parent = &iio_hrtimer_trig_dev;
+	iio_trigger_set_drvdata(t->trig, t);
+
+	hrtimer_init(&t->timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+	t->timer.function = iio_trig_hrtimer_trig;
+	t->delay = HRTIMER_TRIGGER_DEFAULT_DELAY;
+
+	ret = iio_trigger_register(t->trig);
+	if (ret)
+		goto out2;
+	list_add(&t->l, &iio_hrtimer_trig_list);
+	__module_get(THIS_MODULE);
+	mutex_unlock(&iio_hrtimer_trig_list_mut);
+	return 0;
+
+out2:
+	iio_trigger_put(t->trig);
+free_t:
+	kfree(t);
+out1:
+	mutex_unlock(&iio_hrtimer_trig_list_mut);
+	return ret;
+}
+
+static int iio_hrtimer_trigger_remove(int id)
+{
+	bool foundit = false;
+	struct iio_hrtimer_trig *t;
+	mutex_lock(&iio_hrtimer_trig_list_mut);
+	list_for_each_entry(t, &iio_hrtimer_trig_list, l)
+		if (id == t->id) {
+			foundit = true;
+			break;
+		}
+	if (!foundit) {
+		mutex_unlock(&iio_hrtimer_trig_list_mut);
+		return -EINVAL;
+	}
+
+	hrtimer_cancel(&t->timer);
+
+	iio_trigger_unregister(t->trig);
+	iio_trigger_free(t->trig);
+
+	list_del(&t->l);
+	kfree(t);
+	module_put(THIS_MODULE);
+	mutex_unlock(&iio_hrtimer_trig_list_mut);
+	return 0;
+}
+
+
+static int __init iio_hrtimer_trig_init(void)
+{
+	device_initialize(&iio_hrtimer_trig_dev);
+	dev_set_name(&iio_hrtimer_trig_dev, "iio_hrtimer_trigger");
+	return device_add(&iio_hrtimer_trig_dev);
+}
+module_init(iio_hrtimer_trig_init);
+
+static void __exit iio_hrtimer_trig_exit(void)
+{
+	device_unregister(&iio_hrtimer_trig_dev);
+}
+module_exit(iio_hrtimer_trig_exit);
+
+MODULE_AUTHOR("Joo Aun Saw <jasaw@dius.com.au>");
+MODULE_DESCRIPTION("Periodic hrtimer trigger for the iio subsystem");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:iio-trig-hrtimer");
